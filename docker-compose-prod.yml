version: '3.7'
services:
  identity:
    container_name: identity
    image: erada/identity
    build: 
      context: ./identity
      dockerfile: Dockerfile
    env_file:
      - ./environment.env
    depends_on:
            - postgres
    command: npm run start:dev

    volumes:
       - ./identity:/app
       - /app/node_modules
    networks:
      - erada_network
    restart: on-failure

   # VAS -------------------------------------------------
  vas:
    container_name: vas
    image: erada/vas
    build: 
      context: ./vas
      dockerfile: Dockerfile
    env_file:
      - ./environment.env
    depends_on:
            - postgres
    command: npm run start:dev

    volumes:
       - ./vas:/app
       - /app/node_modules
    networks:
      - erada_network
    restart: on-failure

   
   #--------------------------------------------------
  api-gateway:
    container_name: api-gateway
    image: erada/api-gateway
    build: 
      context: ./api-gateway
      dockerfile: Dockerfile

    env_file:
      - ./environment.env
    depends_on:
            - postgres
    command: npm run start:dev
    
    ports:
      - '80:3000'
    volumes:
       - ./api-gateway:/app
       - /app/node_modules
    networks:
      - erada_network
    restart: on-failure

  # rabbitmq:
  #   image: rabbitmq:management
  #   container_name: rabbitmq_container
  #   ports:
  #     - "5672:5672"
  #     - "15672:15672"
  #   environment:
  #     RABBITMQ_DEFAULT_USER: rabbitmq-user
  #     RABBITMQ_DEFAULT_PASS: rabbitmq-password

  #   networks:
  #     - erada_network

  postgres:
    image: postgres:latest
    container_name: postgres_container
    ports:
      - "5432:5432"
    env_file:
      - ./environment.env
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypass
    volumes:
      - ./init-multi-postgres-databases.sh:/docker-entrypoint-initdb.d/init-multi-postgres-databases.sh
    networks:
      - erada_network
    restart: always

   
networks:
  erada_network:
    driver: bridge
volumes:
 db:
